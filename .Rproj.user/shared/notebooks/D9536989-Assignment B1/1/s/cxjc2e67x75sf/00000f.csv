"0","test_that(""Invalid Aruguments"", { #this test_that checks to make sure there are not invalid inputs"
"0","  expect_error(summary_table(""cancer_sample"", diagnosis, texture_mean)) #this checks if one of the inputs is a string and not a variable then gives an error "
"0","  expect_error(summary_table(5,12,3)) #this checks against just numerical input"
"0","  expect_error(summary_table(cancer_sample, texture_mean, diagnosis)) #this checks against switching the numerical variable and the categorical variable "
"0","})"
"1","[32mTest passed[39m ðŸŽŠ"
"1",""
"1","
"
"0","test_that('NA handling works', { #this test checks that the NA handling works "
"0","  expect_error(summary_table(summary_table(penguins, island, body_mass_g, na.rm = FALSE))) #If na.rm=FALSE we would expect an error, however it is up to the user to decided if it is TRUE or FALSE"
"0","  expect_no_error(summary_table(penguins, island, body_mass_g, na.rm = TRUE)) #no error is expected when na.rm = TRUE"
"0","               })"
"1","[32mTest passed[39m ðŸŒˆ"
"1",""
"1","
"
"0","test_that('Output is correct', { #to check is the output is as expected "
"0","expect_type(summary_table(penguins, island, body_mass_g), ""list"") #checks that the outpyt is a list"
"0","expect_named(summary_table(penguins, island, body_mass_g), c(""island"", ""mean"", ""median"", ""max"", ""min"", ""IQR"", ""sd"")) #checks that names of the coloums are identical to the expected"
"0","})"
"1","[32mTest passed[39m ðŸ¥‡"
"1",""
"1","
"
